// This file contains functions, that cannot be generated by sqlc.
package rssdb

import (
	"context"
)

const mapArticles = `-- name: MapArticles :many
SELECT guid FROM rss_item
WHERE feedurl = ?
`

func (q *Queries) MapArticles(ctx context.Context, feedurl string) (map[string]bool, error) {
	rows, err := q.db.QueryContext(ctx, mapArticles, feedurl)
	if err != nil {
		return nil, err
	}
	items := make(map[string]bool)
	defer rows.Close()
	for rows.Next() {
		var guid string
		if err := rows.Scan(&guid); err != nil {
			return nil, err
		}
		items[guid] = true
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const allArticles = `-- name: allArticles :many
SELECT guid FROM rss_item
`

func (q *Queries) AllArticles(ctx context.Context) (guids map[string]bool, err error) {
	rows, err := q.db.QueryContext(ctx, allArticles)
	if err != nil {
		return nil, err
	}
	items := make(map[string]bool)
	defer rows.Close()
	for rows.Next() {
		var guid string
		if err := rows.Scan(&guid); err != nil {
			return nil, err
		}
		items[guid] = true
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const mapFeedUrls = `-- name: ListFeeds :many
SELECT rssurl FROM rss_feed
`

func (q *Queries) MapFeedUrls(ctx context.Context) (map[string]bool, error) {
	rows, err := q.db.QueryContext(ctx, mapFeedUrls)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var (
		items = make(map[string]bool)
		url   string
	)
	for rows.Next() {
		if err := rows.Scan(&url); err != nil {
			return nil, err
		}
		items[url] = true
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
