// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: queries.sql

package rssdb

import (
	"context"
	"database/sql"
)

const addArticle = `-- name: AddArticle :exec
INSERT INTO rss_item (
	guid, title, author, url, feedurl, pubDate, content, unread, enclosure_url, flags, content_mime_type
	) VALUES (
	?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?
)
`

type AddArticleParams struct {
	Guid            string
	Title           string
	Author          string
	Url             string
	Feedurl         string
	Pubdate         int64
	Content         string
	Unread          int
	EnclosureUrl    sql.NullString
	Flags           sql.NullString
	ContentMimeType string
}

func (q *Queries) AddArticle(ctx context.Context, arg AddArticleParams) error {
	_, err := q.db.ExecContext(ctx, addArticle,
		arg.Guid,
		arg.Title,
		arg.Author,
		arg.Url,
		arg.Feedurl,
		arg.Pubdate,
		arg.Content,
		arg.Unread,
		arg.EnclosureUrl,
		arg.Flags,
		arg.ContentMimeType,
	)
	return err
}

const createFeed = `-- name: CreateFeed :one
INSERT INTO rss_feed (
	rssurl, url, title
	) VALUES (
	?, ?, ?
	)
RETURNING rssurl, url, title, lastmodified, is_rtl, etag
`

type CreateFeedParams struct {
	Rssurl string
	Url    string
	Title  string
}

func (q *Queries) CreateFeed(ctx context.Context, arg CreateFeedParams) (RssFeed, error) {
	row := q.db.QueryRowContext(ctx, createFeed, arg.Rssurl, arg.Url, arg.Title)
	var i RssFeed
	err := row.Scan(
		&i.Rssurl,
		&i.Url,
		&i.Title,
		&i.Lastmodified,
		&i.IsRtl,
		&i.Etag,
	)
	return i, err
}

const deleteArticle = `-- name: DeleteArticle :exec
DELETE FROM rss_item
WHERE url = ?
`

func (q *Queries) DeleteArticle(ctx context.Context, url string) error {
	_, err := q.db.ExecContext(ctx, deleteArticle, url)
	return err
}

const deleteFeed = `-- name: DeleteFeed :exec
DELETE FROM rss_feed
WHERE rssurl = ?
`

func (q *Queries) DeleteFeed(ctx context.Context, rssurl string) error {
	_, err := q.db.ExecContext(ctx, deleteFeed, rssurl)
	return err
}

const deleteFeedArticles = `-- name: DeleteFeedArticles :exec
DELETE FROM rss_item
WHERE feedurl = ?
`

func (q *Queries) DeleteFeedArticles(ctx context.Context, feedurl string) error {
	_, err := q.db.ExecContext(ctx, deleteFeedArticles, feedurl)
	return err
}

const getArticle = `-- name: GetArticle :one
SELECT id, guid, title, author, url, feedurl, pubdate, content, unread, enclosure_url, enclosure_type, enqueued, flags, deleted, base, content_mime_type, enclosure_description, enclosure_description_mime_type FROM rss_item
WHERE url = ? LIMIT 1
`

func (q *Queries) GetArticle(ctx context.Context, url string) (RssItem, error) {
	row := q.db.QueryRowContext(ctx, getArticle, url)
	var i RssItem
	err := row.Scan(
		&i.ID,
		&i.Guid,
		&i.Title,
		&i.Author,
		&i.Url,
		&i.Feedurl,
		&i.Pubdate,
		&i.Content,
		&i.Unread,
		&i.EnclosureUrl,
		&i.EnclosureType,
		&i.Enqueued,
		&i.Flags,
		&i.Deleted,
		&i.Base,
		&i.ContentMimeType,
		&i.EnclosureDescription,
		&i.EnclosureDescriptionMimeType,
	)
	return i, err
}

const getFeed = `-- name: GetFeed :one
SELECT rssurl, url, title, lastmodified, is_rtl, etag FROM rss_feed
WHERE rssurl = ? LIMIT 1
`

func (q *Queries) GetFeed(ctx context.Context, rssurl string) (RssFeed, error) {
	row := q.db.QueryRowContext(ctx, getFeed, rssurl)
	var i RssFeed
	err := row.Scan(
		&i.Rssurl,
		&i.Url,
		&i.Title,
		&i.Lastmodified,
		&i.IsRtl,
		&i.Etag,
	)
	return i, err
}

const getFeedPage = `-- name: GetFeedPage :many
SELECT unread, pubDate, author, title, url FROM rss_item
WHERE feedurl = ?
ORDER BY pubDate DESC
`

type GetFeedPageRow struct {
	Unread  int
	Pubdate int64
	Author  string
	Title   string
	Url     string
}

func (q *Queries) GetFeedPage(ctx context.Context, feedurl string) ([]GetFeedPageRow, error) {
	rows, err := q.db.QueryContext(ctx, getFeedPage, feedurl)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetFeedPageRow
	for rows.Next() {
		var i GetFeedPageRow
		if err := rows.Scan(
			&i.Unread,
			&i.Pubdate,
			&i.Author,
			&i.Title,
			&i.Url,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const queryMainPage = `-- name: QueryMainPage :many
SELECT title, feedurl, unread_count, article_count FROM main_page_feed
`

func (q *Queries) QueryMainPage(ctx context.Context) ([]MainPageFeed, error) {
	rows, err := q.db.QueryContext(ctx, queryMainPage)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []MainPageFeed
	for rows.Next() {
		var i MainPageFeed
		if err := rows.Scan(
			&i.Title,
			&i.Feedurl,
			&i.UnreadCount,
			&i.ArticleCount,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
