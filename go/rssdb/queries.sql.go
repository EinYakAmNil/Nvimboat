// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: queries.sql

package rssdb

import (
	"context"
)

const createFeed = `-- name: CreateFeed :one
INSERT INTO rss_feed (
	rssurl, url, title
	) VALUES (
	?, ?, ?
	)
RETURNING rssurl, url, title, lastmodified, is_rtl, etag
`

type CreateFeedParams struct {
	Rssurl string
	Url    string
	Title  string
}

func (q *Queries) CreateFeed(ctx context.Context, arg CreateFeedParams) (RssFeed, error) {
	row := q.db.QueryRowContext(ctx, createFeed, arg.Rssurl, arg.Url, arg.Title)
	var i RssFeed
	err := row.Scan(
		&i.Rssurl,
		&i.Url,
		&i.Title,
		&i.Lastmodified,
		&i.IsRtl,
		&i.Etag,
	)
	return i, err
}

const deleteFeed = `-- name: DeleteFeed :exec
DELETE FROM rss_feed
WHERE rssurl = ?
`

func (q *Queries) DeleteFeed(ctx context.Context, rssurl string) error {
	_, err := q.db.ExecContext(ctx, deleteFeed, rssurl)
	return err
}

const deleteFeedArticles = `-- name: DeleteFeedArticles :exec
DELETE FROM rss_item
WHERE feedurl = ?
`

func (q *Queries) DeleteFeedArticles(ctx context.Context, feedurl string) error {
	_, err := q.db.ExecContext(ctx, deleteFeedArticles, feedurl)
	return err
}

const getFeed = `-- name: GetFeed :one
SELECT rssurl, url, title, lastmodified, is_rtl, etag FROM rss_feed
WHERE rssurl = ? LIMIT 1
`

func (q *Queries) GetFeed(ctx context.Context, rssurl string) (RssFeed, error) {
	row := q.db.QueryRowContext(ctx, getFeed, rssurl)
	var i RssFeed
	err := row.Scan(
		&i.Rssurl,
		&i.Url,
		&i.Title,
		&i.Lastmodified,
		&i.IsRtl,
		&i.Etag,
	)
	return i, err
}

const listFeeds = `-- name: ListFeeds :many
SELECT rssurl, url, title, lastmodified, is_rtl, etag FROM rss_feed
ORDER BY rssurl
`

func (q *Queries) ListFeeds(ctx context.Context) ([]RssFeed, error) {
	rows, err := q.db.QueryContext(ctx, listFeeds)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []RssFeed
	for rows.Next() {
		var i RssFeed
		if err := rows.Scan(
			&i.Rssurl,
			&i.Url,
			&i.Title,
			&i.Lastmodified,
			&i.IsRtl,
			&i.Etag,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
